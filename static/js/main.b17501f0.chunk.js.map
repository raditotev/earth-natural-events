{"version":3,"sources":["utils/hooks.js","components/event.js","components/lib.js","utils/category-icons.js","components/map.js","components/header.js","App.js","reportWebVitals.js","index.js"],"names":["defaultInitialState","status","data","error","useAsync","initialState","initialStateRef","React","s","a","current","safeSetState","dispatch","mounted","useSafeDispatch","setData","setError","reset","run","promise","then","Error","Promise","reject","isIdle","isLoading","isError","isSuccess","Event","description","children","className","FullPageSpinner","NoEventsInfoPopUp","show","useState","display","setDisplay","useEffect","timer","setTimeout","clearTimeout","categoryIcons","6","7","16","9","14","19","15","17","18","12","13","8","10","fetch","require","Map","category","events","renderEvent","point","event","index","lng","lat","title","id","res","json","length","bootstrapURLKeys","key","process","defaultCenter","defaultZoom","map","geometries","Array","isArray","coordinates","geometry","flat","Header","setCategory","categories","name","aria-label","onChange","e","target","value","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b17501f0.chunk.js","sourcesContent":["import * as React from 'react'\n\nfunction useSafeDispatch(dispatch) {\n  const mounted = React.useRef(false)\n  React.useLayoutEffect(() => {\n    mounted.current = true\n    return () => (mounted.current = false)\n  }, [])\n  return React.useCallback(\n    (...args) => (mounted.current ? dispatch(...args) : void 0),\n    [dispatch],\n  )\n}\n\n// Example usage:\n// const {data, error, status, run} = useAsync()\n// React.useEffect(() => {\n//   run(fetchPokemon(pokemonName))\n// }, [pokemonName, run])\nconst defaultInitialState = {status: 'idle', data: null, error: null}\nfunction useAsync(initialState) {\n  const initialStateRef = React.useRef({\n    ...defaultInitialState,\n    ...initialState,\n  })\n  const [{status, data, error}, setState] = React.useReducer(\n    (s, a) => ({...s, ...a}),\n    initialStateRef.current,\n  )\n\n  const safeSetState = useSafeDispatch(setState)\n\n  const setData = React.useCallback(\n    data => safeSetState({data, status: 'resolved'}),\n    [safeSetState],\n  )\n  const setError = React.useCallback(\n    error => safeSetState({error, status: 'rejected'}),\n    [safeSetState],\n  )\n  const reset = React.useCallback(() => safeSetState(initialStateRef.current), [\n    safeSetState,\n  ])\n\n  const run = React.useCallback(\n    promise => {\n      if (!promise || !promise.then) {\n        throw new Error(\n          `The argument passed to useAsync().run must be a promise. Maybe a function that's passed isn't returning anything?`,\n        )\n      }\n      safeSetState({status: 'pending'})\n      return promise.then(\n        data => {\n          setData(data)\n          return data\n        },\n        error => {\n          setError(error)\n          return Promise.reject(error)\n        },\n      )\n    },\n    [safeSetState, setData, setError],\n  )\n\n  return {\n    // using the same names that react-query uses for convenience\n    isIdle: status === 'idle',\n    isLoading: status === 'pending',\n    isError: status === 'rejected',\n    isSuccess: status === 'resolved',\n\n    setData,\n    setError,\n    error,\n    status,\n    data,\n    run,\n    reset,\n  }\n}\n\nexport {useAsync}\n","function Event({description, children}) {\n  return (\n    <div className=\"icon\">\n      <div className=\"event-card\">{description}</div>\n      {children}\n    </div>\n  )\n}\n\nexport {Event}\n","import {useEffect, useState} from 'react'\nimport {FaSpinner} from 'react-icons/fa'\n\nfunction FullPageSpinner() {\n  return (\n    <div className=\"loading\">\n      <FaSpinner className=\"spinner\" />\n      <h1>Loading...</h1>\n    </div>\n  )\n}\n\nfunction NoEventsInfoPopUp({show}) {\n  const [display, setDisplay] = useState(true)\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDisplay(false)\n    }, 1500)\n    return () => clearTimeout(timer)\n  }, [])\n\n  return display ? <div className=\"info\">No events in this category</div> : null\n}\n\nexport {FullPageSpinner, NoEventsInfoPopUp}\n","import {FaThermometerHalf} from 'react-icons/fa'\nimport {GiEruption} from 'react-icons/gi'\nimport {GiTumbleweed} from 'react-icons/gi'\nimport {GiDustCloud} from 'react-icons/gi'\nimport {GiFallingRocks} from 'react-icons/gi'\nimport {GiBulldozer} from 'react-icons/gi'\nimport {GiIceberg} from 'react-icons/gi'\nimport {GiSnowflake2} from 'react-icons/gi'\nimport {ImFire} from 'react-icons/im'\nimport {RiEarthquakeFill} from 'react-icons/ri'\nimport {RiFloodFill} from 'react-icons/ri'\nimport {RiTyphoonFill} from 'react-icons/ri'\nimport {BsDropletHalf} from 'react-icons/bs'\n\nexport const categoryIcons = {\n  6: <GiTumbleweed />,\n  7: <GiDustCloud />,\n  16: <RiEarthquakeFill />,\n  9: <RiFloodFill />,\n  14: <GiFallingRocks />,\n  19: <GiBulldozer />,\n  15: <GiIceberg />,\n  17: <GiSnowflake2 />,\n  18: <FaThermometerHalf />,\n  12: <GiEruption />,\n  13: <BsDropletHalf />,\n  8: <ImFire />,\n  10: <RiTyphoonFill />,\n}\n","import {Fragment, useEffect} from 'react'\nimport {useAsync} from 'utils/hooks'\nimport {Event} from './event'\nimport {FullPageSpinner, NoEventsInfoPopUp} from './lib'\nimport GoogleMapReact from 'google-map-react'\nimport {categoryIcons} from 'utils/category-icons'\nconst fetch = require('node-fetch')\n\nfunction Map({category}) {\n  const {\n    isLoading,\n    data: {events},\n    run,\n  } = useAsync({data: []})\n\n  useEffect(() => {\n    if (!category) {\n      return\n    }\n    run(\n      fetch(\n        `https://eonet.sci.gsfc.nasa.gov/api/v2.1/categories/${category}`,\n      ).then(res => res.json()),\n    )\n  }, [category, run])\n\n  function renderEvent(point, event, index) {\n    const [lng, lat] = point\n    return (\n      <Event\n        key={event.id + index}\n        lat={lat}\n        lng={lng}\n        description={event.title}\n        children={categoryIcons[category]}\n      />\n    )\n  }\n\n  return (\n    <Fragment>\n      {isLoading && <FullPageSpinner />}\n      {events?.length === 0 && <NoEventsInfoPopUp />}\n      <GoogleMapReact\n        bootstrapURLKeys={{key: process.env.REACT_APP_GOOGLE_API_KEY}}\n        defaultCenter={{\n          lat: 45,\n          lng: 0,\n        }}\n        defaultZoom={1}\n      >\n        {events\n          ?.map((event, index) => {\n            if (\n              event.geometries.length > 1 ||\n              Array.isArray(event.geometries[0].coordinates[0])\n            ) {\n              const coordinates =\n                event.geometries.length > 1\n                  ? event.geometries.map(geometry => geometry.coordinates)\n                  : event.geometries[0].coordinates[0]\n              return coordinates.map((point, index) => {\n                return isLoading ? null : renderEvent(point, event, index)\n              })\n            }\n            const point = event.geometries[0].coordinates\n            return isLoading ? null : renderEvent(point, event, index)\n          })\n          .flat()}\n      </GoogleMapReact>\n    </Fragment>\n  )\n}\n\nexport {Map}\n","import {useEffect} from 'react'\nimport {useAsync} from 'utils/hooks'\n\nfunction Header({category, setCategory}) {\n  const {\n    data: {categories},\n    run,\n  } = useAsync({data: {categories: []}})\n\n  useEffect(() => {\n    run(\n      fetch('https://eonet.sci.gsfc.nasa.gov/api/v2.1/categories').then(res =>\n        res.json(),\n      ),\n    )\n  }, [run])\n\n  function handleCategoryChange(e) {\n    setCategory(e.target.value)\n  }\n\n  return (\n    <header>\n      <h1>\n        Earth Natural Events\n        <span>\n          Powered by <strong>NASA</strong>\n        </span>\n      </h1>\n      <select\n        name=\"categories\"\n        aria-label=\"Select natural event\"\n        onChange={handleCategoryChange}\n      >\n        <option value=\"\">Select event type</option>\n        {categories?.map(category => {\n          const {id, title} = category\n          return (\n            <option key={id} value={id}>\n              {title}\n            </option>\n          )\n        })}\n      </select>\n    </header>\n  )\n}\n\nexport {Header}\n","import {Map} from 'components/map'\nimport {Header} from 'components/header'\nimport {Fragment, useState} from 'react'\n\nfunction App() {\n  const [category, setCategory] = useState(null)\n\n  return (\n    <Fragment>\n      <Header category={category} setCategory={setCategory} />\n      <Map category={category} />\n    </Fragment>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}